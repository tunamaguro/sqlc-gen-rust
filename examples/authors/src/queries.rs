//! Code generated by sqlc-gen-rust. SHOULD NOT EDIT.
//! sqlc version: v1.28.0
//! sqlc-gen-rust version: v0.1.4

use postgres::types::ToSql;
fn slice_iter<'a>(
    s: &'a [&(dyn ToSql + Sync)],
) -> impl ExactSizeIterator<Item = &'a dyn ToSql> + 'a {
    s.iter().map(|s| *s as _)
}
pub struct GetAuthorRow {
    pub id: i64,
    pub name: String,
    pub bio: Option<String>,
}
impl GetAuthorRow {
    pub fn from_row(row: &postgres::Row) -> Result<Self, postgres::Error> {
        Ok(Self {
            id: row.try_get(0)?,
            name: row.try_get(1)?,
            bio: row.try_get(2)?,
        })
    }
}
pub struct GetAuthor {
    id: i64,
}
impl GetAuthor {
    pub const QUERY: &'static str = r"SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1";
    pub fn query_one(
        &self,
        client: &mut impl postgres::GenericClient,
    ) -> Result<GetAuthorRow, postgres::Error> {
        let row = client.query_one(Self::QUERY, &[&self.id])?;
        GetAuthorRow::from_row(&row)
    }
    pub fn query_opt(
        &self,
        client: &mut impl postgres::GenericClient,
    ) -> Result<Option<GetAuthorRow>, postgres::Error> {
        let row = client.query_opt(Self::QUERY, &[&self.id])?;
        match row {
            Some(row) => Ok(Some(GetAuthorRow::from_row(&row)?)),
            None => Ok(None),
        }
    }
}
impl GetAuthor {
    pub const fn builder() -> GetAuthorBuilder<'static, ((),)> {
        GetAuthorBuilder {
            fields: ((),),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct GetAuthorBuilder<'a, Fields = ((),)> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a> GetAuthorBuilder<'a, ((),)> {
    pub fn id(self, id: i64) -> GetAuthorBuilder<'a, (i64,)> {
        let ((),) = self.fields;
        let _phantom = self._phantom;
        GetAuthorBuilder {
            fields: (id,),
            _phantom,
        }
    }
}
impl<'a> GetAuthorBuilder<'a, (i64,)> {
    pub const fn build(self) -> GetAuthor {
        let (id,) = self.fields;
        GetAuthor { id }
    }
}
pub struct ListAuthorsRow {
    pub id: i64,
    pub name: String,
    pub bio: Option<String>,
}
impl ListAuthorsRow {
    pub fn from_row(row: &postgres::Row) -> Result<Self, postgres::Error> {
        Ok(Self {
            id: row.try_get(0)?,
            name: row.try_get(1)?,
            bio: row.try_get(2)?,
        })
    }
}
pub struct ListAuthors;
impl ListAuthors {
    pub const QUERY: &'static str = r"SELECT id, name, bio FROM authors
ORDER BY name";
    pub fn query_many(
        &self,
        client: &mut impl postgres::GenericClient,
    ) -> Result<Vec<ListAuthorsRow>, postgres::Error> {
        let rows = client.query(Self::QUERY, &[])?;
        rows.into_iter()
            .map(|r| ListAuthorsRow::from_row(&r))
            .collect()
    }
    pub fn query_iter<'row_iter>(
        &self,
        client: &'row_iter mut impl postgres::GenericClient,
    ) -> Result<postgres::RowIter<'row_iter>, postgres::Error> {
        client.query_raw(Self::QUERY, slice_iter(&[]))
    }
}
impl ListAuthors {
    pub const fn builder() -> ListAuthorsBuilder<'static, ()> {
        ListAuthorsBuilder {
            fields: (),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct ListAuthorsBuilder<'a, Fields = ()> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a> ListAuthorsBuilder<'a, ()> {
    pub const fn build(self) -> ListAuthors {
        let () = self.fields;
        ListAuthors {}
    }
}
pub struct CreateAuthorRow {
    pub id: i64,
    pub name: String,
    pub bio: Option<String>,
}
impl CreateAuthorRow {
    pub fn from_row(row: &postgres::Row) -> Result<Self, postgres::Error> {
        Ok(Self {
            id: row.try_get(0)?,
            name: row.try_get(1)?,
            bio: row.try_get(2)?,
        })
    }
}
pub struct CreateAuthor<'a> {
    name: &'a str,
    bio: Option<&'a str>,
}
impl<'a> CreateAuthor<'a> {
    pub const QUERY: &'static str = r"INSERT INTO authors (
          name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio";
    pub fn query_one(
        &self,
        client: &mut impl postgres::GenericClient,
    ) -> Result<CreateAuthorRow, postgres::Error> {
        let row = client.query_one(Self::QUERY, &[&self.name, &self.bio])?;
        CreateAuthorRow::from_row(&row)
    }
    pub fn query_opt(
        &self,
        client: &mut impl postgres::GenericClient,
    ) -> Result<Option<CreateAuthorRow>, postgres::Error> {
        let row = client.query_opt(Self::QUERY, &[&self.name, &self.bio])?;
        match row {
            Some(row) => Ok(Some(CreateAuthorRow::from_row(&row)?)),
            None => Ok(None),
        }
    }
}
impl<'a> CreateAuthor<'a> {
    pub const fn builder() -> CreateAuthorBuilder<'a, ((), ())> {
        CreateAuthorBuilder {
            fields: ((), ()),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct CreateAuthorBuilder<'a, Fields = ((), ())> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a, Bio> CreateAuthorBuilder<'a, ((), Bio)> {
    pub fn name(self, name: &'a str) -> CreateAuthorBuilder<'a, (&'a str, Bio)> {
        let ((), bio) = self.fields;
        let _phantom = self._phantom;
        CreateAuthorBuilder {
            fields: (name, bio),
            _phantom,
        }
    }
}
impl<'a, Name> CreateAuthorBuilder<'a, (Name, ())> {
    pub fn bio(self, bio: Option<&'a str>) -> CreateAuthorBuilder<'a, (Name, Option<&'a str>)> {
        let (name, ()) = self.fields;
        let _phantom = self._phantom;
        CreateAuthorBuilder {
            fields: (name, bio),
            _phantom,
        }
    }
}
impl<'a> CreateAuthorBuilder<'a, (&'a str, Option<&'a str>)> {
    pub const fn build(self) -> CreateAuthor<'a> {
        let (name, bio) = self.fields;
        CreateAuthor { name, bio }
    }
}
pub struct DeleteAuthorRow {}
impl DeleteAuthorRow {
    pub fn from_row(row: &postgres::Row) -> Result<Self, postgres::Error> {
        Ok(Self {})
    }
}
pub struct DeleteAuthor {
    id: i64,
}
impl DeleteAuthor {
    pub const QUERY: &'static str = r"DELETE FROM authors
WHERE id = $1";
    pub fn execute(
        &self,
        client: &mut impl postgres::GenericClient,
    ) -> Result<u64, postgres::Error> {
        client.execute(Self::QUERY, &[&self.id])
    }
}
impl DeleteAuthor {
    pub const fn builder() -> DeleteAuthorBuilder<'static, ((),)> {
        DeleteAuthorBuilder {
            fields: ((),),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct DeleteAuthorBuilder<'a, Fields = ((),)> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a> DeleteAuthorBuilder<'a, ((),)> {
    pub fn id(self, id: i64) -> DeleteAuthorBuilder<'a, (i64,)> {
        let ((),) = self.fields;
        let _phantom = self._phantom;
        DeleteAuthorBuilder {
            fields: (id,),
            _phantom,
        }
    }
}
impl<'a> DeleteAuthorBuilder<'a, (i64,)> {
    pub const fn build(self) -> DeleteAuthor {
        let (id,) = self.fields;
        DeleteAuthor { id }
    }
}
pub struct CreateAuthorsRow {}
impl CreateAuthorsRow {
    pub fn from_row(row: &postgres::Row) -> Result<Self, postgres::Error> {
        Ok(Self {})
    }
}
pub struct CreateAuthors<'a> {
    name: &'a str,
    bio: Option<&'a str>,
}
impl<'a> CreateAuthors<'a> {
    pub const QUERY: &'static str = r"INSERT INTO authors (name, bio) VALUES ($1, $2)";
    pub fn copy_in_client<'client>(
        &self,
        client: &'client mut postgres::Client,
    ) -> Result<postgres::CopyInWriter<'client>, postgres::Error> {
        client.copy_in(Self::QUERY)
    }
    pub fn copy_in_transaction<'transaction>(
        &self,
        client: &'transaction mut postgres::Transaction,
    ) -> Result<postgres::CopyInWriter<'transaction>, postgres::Error> {
        client.copy_in(Self::QUERY)
    }
}
impl<'a> CreateAuthors<'a> {
    pub const fn builder() -> CreateAuthorsBuilder<'a, ((), ())> {
        CreateAuthorsBuilder {
            fields: ((), ()),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct CreateAuthorsBuilder<'a, Fields = ((), ())> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a, Bio> CreateAuthorsBuilder<'a, ((), Bio)> {
    pub fn name(self, name: &'a str) -> CreateAuthorsBuilder<'a, (&'a str, Bio)> {
        let ((), bio) = self.fields;
        let _phantom = self._phantom;
        CreateAuthorsBuilder {
            fields: (name, bio),
            _phantom,
        }
    }
}
impl<'a, Name> CreateAuthorsBuilder<'a, (Name, ())> {
    pub fn bio(self, bio: Option<&'a str>) -> CreateAuthorsBuilder<'a, (Name, Option<&'a str>)> {
        let (name, ()) = self.fields;
        let _phantom = self._phantom;
        CreateAuthorsBuilder {
            fields: (name, bio),
            _phantom,
        }
    }
}
impl<'a> CreateAuthorsBuilder<'a, (&'a str, Option<&'a str>)> {
    pub const fn build(self) -> CreateAuthors<'a> {
        let (name, bio) = self.fields;
        CreateAuthors { name, bio }
    }
}
