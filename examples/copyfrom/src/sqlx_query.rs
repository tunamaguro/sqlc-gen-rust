//! Code generated by sqlc-gen-rust. SHOULD NOT EDIT.
//! sqlc version: v1.28.0
//! sqlc-gen-rust version: v0.1.4

#[derive(sqlx::FromRow)]
pub struct GetAuthorRow {
    pub id: i64,
    pub name: String,
    pub bio: Option<String>,
}
pub struct GetAuthor {
    id: i64,
}
impl GetAuthor {
    pub const QUERY: &'static str = r"SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1";
    pub fn query_as<'a>(
        &'a self,
    ) -> sqlx::query::QueryAs<
        'a,
        sqlx::Postgres,
        GetAuthorRow,
        <sqlx::Postgres as sqlx::Database>::Arguments<'a>,
    > {
        sqlx::query_as::<_, GetAuthorRow>(Self::QUERY).bind(self.id)
    }
    pub fn query_one<'a, 'b, A>(
        &'a self,
        conn: A,
    ) -> impl Future<Output = Result<GetAuthorRow, sqlx::Error>> + Send + 'a
    where
        A: sqlx::Acquire<'b, Database = sqlx::Postgres> + Send + 'a,
    {
        async move {
            let mut conn = conn.acquire().await?;
            let val = self.query_as().fetch_one(&mut *conn).await?;
            Ok(val)
        }
    }
    pub fn query_opt<'a, 'b, A>(
        &'a self,
        conn: A,
    ) -> impl Future<Output = Result<Option<GetAuthorRow>, sqlx::Error>> + Send + 'a
    where
        A: sqlx::Acquire<'b, Database = sqlx::Postgres> + Send + 'a,
    {
        async move {
            let mut conn = conn.acquire().await?;
            let val = self.query_as().fetch_optional(&mut *conn).await?;
            Ok(val)
        }
    }
}
impl GetAuthor {
    pub const fn builder() -> GetAuthorBuilder<'static, ((),)> {
        GetAuthorBuilder {
            fields: ((),),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct GetAuthorBuilder<'a, Fields = ((),)> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a> GetAuthorBuilder<'a, ((),)> {
    pub fn id(self, id: i64) -> GetAuthorBuilder<'a, (i64,)> {
        let ((),) = self.fields;
        let _phantom = self._phantom;
        GetAuthorBuilder {
            fields: (id,),
            _phantom,
        }
    }
}
impl<'a> GetAuthorBuilder<'a, (i64,)> {
    pub const fn build(self) -> GetAuthor {
        let (id,) = self.fields;
        GetAuthor { id }
    }
}
#[derive(sqlx::FromRow)]
pub struct CreateAuthorsRow {}
pub struct CreateAuthors<'a> {
    id: i64,
    name: &'a str,
    bio: Option<&'a str>,
}
impl<'a> CreateAuthors<'a> {
    pub const QUERY: &'static str = r"COPY authors (id,name,bio) FROM STDIN (FORMAT BINARY)";
    pub fn query_as(
        &'a self,
    ) -> sqlx::query::QueryAs<
        'a,
        sqlx::Postgres,
        CreateAuthorsRow,
        <sqlx::Postgres as sqlx::Database>::Arguments<'a>,
    > {
        sqlx::query_as::<_, CreateAuthorsRow>(Self::QUERY)
            .bind(self.id)
            .bind(self.name)
            .bind(self.bio)
    }
}
impl<'a> CreateAuthors<'a> {
    pub const fn builder() -> CreateAuthorsBuilder<'a, ((), (), ())> {
        CreateAuthorsBuilder {
            fields: ((), (), ()),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct CreateAuthorsBuilder<'a, Fields = ((), (), ())> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a, Name, Bio> CreateAuthorsBuilder<'a, ((), Name, Bio)> {
    pub fn id(self, id: i64) -> CreateAuthorsBuilder<'a, (i64, Name, Bio)> {
        let ((), name, bio) = self.fields;
        let _phantom = self._phantom;
        CreateAuthorsBuilder {
            fields: (id, name, bio),
            _phantom,
        }
    }
}
impl<'a, Id, Bio> CreateAuthorsBuilder<'a, (Id, (), Bio)> {
    pub fn name(self, name: &'a str) -> CreateAuthorsBuilder<'a, (Id, &'a str, Bio)> {
        let (id, (), bio) = self.fields;
        let _phantom = self._phantom;
        CreateAuthorsBuilder {
            fields: (id, name, bio),
            _phantom,
        }
    }
}
impl<'a, Id, Name> CreateAuthorsBuilder<'a, (Id, Name, ())> {
    pub fn bio(
        self,
        bio: Option<&'a str>,
    ) -> CreateAuthorsBuilder<'a, (Id, Name, Option<&'a str>)> {
        let (id, name, ()) = self.fields;
        let _phantom = self._phantom;
        CreateAuthorsBuilder {
            fields: (id, name, bio),
            _phantom,
        }
    }
}
impl<'a> CreateAuthorsBuilder<'a, (i64, &'a str, Option<&'a str>)> {
    pub const fn build(self) -> CreateAuthors<'a> {
        let (id, name, bio) = self.fields;
        CreateAuthors { id, name, bio }
    }
}
