//! Code generated by sqlc-gen-rust. SHOULD NOT EDIT.
//! sqlc version: v1.28.0
//! sqlc-gen-rust version: v0.1.8

use tokio_postgres::types::ToSql;
pub struct GetAuthorRow {
    pub id: i64,
    pub name: String,
    pub bio: Option<String>,
}
impl GetAuthorRow {
    pub fn from_row(row: &tokio_postgres::Row) -> Result<Self, tokio_postgres::Error> {
        Ok(Self {
            id: row.try_get(0)?,
            name: row.try_get(1)?,
            bio: row.try_get(2)?,
        })
    }
}
pub struct GetAuthor {
    id: i64,
}
impl GetAuthor {
    pub const QUERY: &'static str = r"SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1";
    pub async fn query_one(
        &self,
        client: &impl tokio_postgres::GenericClient,
    ) -> Result<GetAuthorRow, tokio_postgres::Error> {
        let row = client.query_one(Self::QUERY, &self.as_slice()).await?;
        GetAuthorRow::from_row(&row)
    }
    pub async fn query_opt(
        &self,
        client: &impl tokio_postgres::GenericClient,
    ) -> Result<Option<GetAuthorRow>, tokio_postgres::Error> {
        let row = client.query_opt(Self::QUERY, &self.as_slice()).await?;
        match row {
            Some(row) => Ok(Some(GetAuthorRow::from_row(&row)?)),
            None => Ok(None),
        }
    }
    pub fn as_slice(&self) -> [&(dyn ToSql + Sync); 1] {
        [&self.id]
    }
}
impl GetAuthor {
    pub const fn builder() -> GetAuthorBuilder<'static, ((),)> {
        GetAuthorBuilder {
            fields: ((),),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct GetAuthorBuilder<'a, Fields = ((),)> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a> GetAuthorBuilder<'a, ((),)> {
    pub fn id(self, id: i64) -> GetAuthorBuilder<'a, (i64,)> {
        let ((),) = self.fields;
        let _phantom = self._phantom;
        GetAuthorBuilder {
            fields: (id,),
            _phantom,
        }
    }
}
impl<'a> GetAuthorBuilder<'a, (i64,)> {
    pub const fn build(self) -> GetAuthor {
        let (id,) = self.fields;
        GetAuthor { id }
    }
}
pub struct CreateAuthorsRow {}
impl CreateAuthorsRow {
    pub fn from_row(row: &tokio_postgres::Row) -> Result<Self, tokio_postgres::Error> {
        Ok(Self {})
    }
}
pub struct CreateAuthors<'a> {
    id: i64,
    name: &'a str,
    bio: Option<&'a str>,
}
impl<'a> CreateAuthors<'a> {
    pub const QUERY: &'static str = r"COPY authors (id,name,bio) FROM STDIN (FORMAT BINARY)";
    pub fn as_slice(&self) -> [&(dyn ToSql + Sync); 3] {
        [&self.id, &self.name, &self.bio]
    }
}
impl<'a> CreateAuthors<'a> {
    pub const fn builder() -> CreateAuthorsBuilder<'a, ((), (), ())> {
        CreateAuthorsBuilder {
            fields: ((), (), ()),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct CreateAuthorsBuilder<'a, Fields = ((), (), ())> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a, Name, Bio> CreateAuthorsBuilder<'a, ((), Name, Bio)> {
    pub fn id(self, id: i64) -> CreateAuthorsBuilder<'a, (i64, Name, Bio)> {
        let ((), name, bio) = self.fields;
        let _phantom = self._phantom;
        CreateAuthorsBuilder {
            fields: (id, name, bio),
            _phantom,
        }
    }
}
impl<'a, Id, Bio> CreateAuthorsBuilder<'a, (Id, (), Bio)> {
    pub fn name(self, name: &'a str) -> CreateAuthorsBuilder<'a, (Id, &'a str, Bio)> {
        let (id, (), bio) = self.fields;
        let _phantom = self._phantom;
        CreateAuthorsBuilder {
            fields: (id, name, bio),
            _phantom,
        }
    }
}
impl<'a, Id, Name> CreateAuthorsBuilder<'a, (Id, Name, ())> {
    pub fn bio(
        self,
        bio: Option<&'a str>,
    ) -> CreateAuthorsBuilder<'a, (Id, Name, Option<&'a str>)> {
        let (id, name, ()) = self.fields;
        let _phantom = self._phantom;
        CreateAuthorsBuilder {
            fields: (id, name, bio),
            _phantom,
        }
    }
}
impl<'a> CreateAuthorsBuilder<'a, (i64, &'a str, Option<&'a str>)> {
    pub const fn build(self) -> CreateAuthors<'a> {
        let (id, name, bio) = self.fields;
        CreateAuthors { id, name, bio }
    }
}
