//! Code generated by sqlc-gen-rust. SHOULD NOT EDIT.
//! sqlc version: v1.28.0
//! sqlc-gen-rust version: v0.1.10

#[derive(sqlx::FromRow)]
pub struct GetMappingRow {
    #[sqlx(rename = "bool_val")]
    pub bool_val: bool,
    #[sqlx(rename = "tinyint_val")]
    pub tinyint_val: i8,
    #[sqlx(rename = "smallint_val")]
    pub smallint_val: i16,
    #[sqlx(rename = "int_val")]
    pub int_val: i32,
    #[sqlx(rename = "int_nullable_val")]
    pub int_nullable_val: Option<i32>,
    #[sqlx(rename = "bigint_val")]
    pub bigint_val: i64,
    #[sqlx(rename = "float_val")]
    pub float_val: f32,
    #[sqlx(rename = "double_val")]
    pub double_val: f64,
    #[sqlx(rename = "text_val")]
    pub text_val: String,
    #[sqlx(rename = "blob_val")]
    pub blob_val: Vec<u8>,
    #[sqlx(rename = "timestamp_val")]
    pub timestamp_val: chrono::DateTime<chrono::Utc>,
    #[sqlx(rename = "datetime_val")]
    pub datetime_val: chrono::NaiveDateTime,
    #[sqlx(rename = "date_val")]
    pub date_val: chrono::NaiveDate,
    #[sqlx(rename = "time_val")]
    pub time_val: sqlx::mysql::types::MySqlTime,
    #[sqlx(rename = "json_val")]
    pub json_val: serde_json::Value,
}
pub struct GetMapping;
impl GetMapping {
    pub const QUERY: &'static str = r"SELECT
    bool_val,
    tinyint_val,
    smallint_val,
    int_val,
    int_nullable_val,
    bigint_val,
    float_val,
    double_val,
    text_val,
    blob_val,
    timestamp_val,
    datetime_val,
    date_val,
    time_val,
    json_val
FROM mapping";
    pub fn query_as<'a>(
        &'a self,
    ) -> sqlx::query::QueryAs<
        'a,
        sqlx::MySql,
        GetMappingRow,
        <sqlx::MySql as sqlx::Database>::Arguments<'a>,
    > {
        sqlx::query_as::<_, GetMappingRow>(Self::QUERY)
    }
    pub fn query_one<'a, 'b, A>(
        &'a self,
        conn: A,
    ) -> impl Future<Output = Result<GetMappingRow, sqlx::Error>> + Send + 'a
    where
        A: sqlx::Acquire<'b, Database = sqlx::MySql> + Send + 'a,
    {
        async move {
            let mut conn = conn.acquire().await?;
            let val = self.query_as().fetch_one(&mut *conn).await?;
            Ok(val)
        }
    }
    pub fn query_opt<'a, 'b, A>(
        &'a self,
        conn: A,
    ) -> impl Future<Output = Result<Option<GetMappingRow>, sqlx::Error>> + Send + 'a
    where
        A: sqlx::Acquire<'b, Database = sqlx::MySql> + Send + 'a,
    {
        async move {
            let mut conn = conn.acquire().await?;
            let val = self.query_as().fetch_optional(&mut *conn).await?;
            Ok(val)
        }
    }
}
impl GetMapping {
    pub const fn builder() -> GetMappingBuilder<'static, ()> {
        GetMappingBuilder {
            fields: (),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct GetMappingBuilder<'a, Fields = ()> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a> GetMappingBuilder<'a, ()> {
    pub const fn build(self) -> GetMapping {
        let () = self.fields;
        GetMapping {}
    }
}
#[derive(sqlx::FromRow)]
pub struct InsertMappingRow {}
pub struct InsertMapping<'a> {
    bool_val: bool,
    tinyint_val: i8,
    smallint_val: i16,
    int_val: i32,
    int_nullable_val: Option<i32>,
    bigint_val: i64,
    float_val: f32,
    double_val: f64,
    text_val: &'a str,
    blob_val: &'a [u8],
    timestamp_val: &'a chrono::DateTime<chrono::Utc>,
    datetime_val: &'a chrono::NaiveDateTime,
    date_val: &'a chrono::NaiveDate,
    time_val: sqlx::mysql::types::MySqlTime,
    json_val: &'a serde_json::Value,
}
impl<'a> InsertMapping<'a> {
    pub const QUERY: &'static str = r"INSERT INTO mapping (
    bool_val,
    tinyint_val,
    smallint_val,
    int_val,
    int_nullable_val,
    bigint_val,
    float_val,
    double_val,
    text_val,
    blob_val,
    timestamp_val,
    datetime_val,
    date_val,
    time_val,
    json_val
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)";
    pub fn query_as(
        &'a self,
    ) -> sqlx::query::QueryAs<
        'a,
        sqlx::MySql,
        InsertMappingRow,
        <sqlx::MySql as sqlx::Database>::Arguments<'a>,
    > {
        sqlx::query_as::<_, InsertMappingRow>(Self::QUERY)
            .bind(self.bool_val)
            .bind(self.tinyint_val)
            .bind(self.smallint_val)
            .bind(self.int_val)
            .bind(self.int_nullable_val)
            .bind(self.bigint_val)
            .bind(self.float_val)
            .bind(self.double_val)
            .bind(self.text_val)
            .bind(self.blob_val)
            .bind(self.timestamp_val)
            .bind(self.datetime_val)
            .bind(self.date_val)
            .bind(self.time_val)
            .bind(self.json_val)
    }
    pub fn execute<'b, A>(
        &'a self,
        conn: A,
    ) -> impl Future<Output = Result<<sqlx::MySql as sqlx::Database>::QueryResult, sqlx::Error>>
    + Send
    + 'a
    where
        A: sqlx::Acquire<'b, Database = sqlx::MySql> + Send + 'a,
    {
        async move {
            let mut conn = conn.acquire().await?;
            sqlx::query(Self::QUERY)
                .bind(self.bool_val)
                .bind(self.tinyint_val)
                .bind(self.smallint_val)
                .bind(self.int_val)
                .bind(self.int_nullable_val)
                .bind(self.bigint_val)
                .bind(self.float_val)
                .bind(self.double_val)
                .bind(self.text_val)
                .bind(self.blob_val)
                .bind(self.timestamp_val)
                .bind(self.datetime_val)
                .bind(self.date_val)
                .bind(self.time_val)
                .bind(self.json_val)
                .execute(&mut *conn)
                .await
        }
    }
}
impl<'a> InsertMapping<'a> {
    pub const fn builder()
    -> InsertMappingBuilder<'a, ((), (), (), (), (), (), (), (), (), (), (), (), (), (), ())> {
        InsertMappingBuilder {
            fields: ((), (), (), (), (), (), (), (), (), (), (), (), (), (), ()),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct InsertMappingBuilder<
    'a,
    Fields = ((), (), (), (), (), (), (), (), (), (), (), (), (), (), ()),
> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<
    'a,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            (),
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn bool_val(
        self,
        bool_val: bool,
    ) -> InsertMappingBuilder<
        'a,
        (
            bool,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            (),
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            (),
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn tinyint_val(
        self,
        tinyint_val: i8,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            i8,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            (),
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            (),
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn smallint_val(
        self,
        smallint_val: i16,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            i16,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            (),
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            (),
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn int_val(
        self,
        int_val: i32,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            i32,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            (),
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            (),
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn int_nullable_val(
        self,
        int_nullable_val: Option<i32>,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            Option<i32>,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            (),
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            (),
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn bigint_val(
        self,
        bigint_val: i64,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            i64,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            (),
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            (),
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn float_val(
        self,
        float_val: f32,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            f32,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            (),
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            (),
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn double_val(
        self,
        double_val: f64,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            f64,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            (),
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            (),
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn text_val(
        self,
        text_val: &'a str,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            &'a str,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            (),
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            (),
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn blob_val(
        self,
        blob_val: &'a [u8],
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            &'a [u8],
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            (),
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    DatetimeVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            (),
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn timestamp_val(
        self,
        timestamp_val: &'a chrono::DateTime<chrono::Utc>,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            &'a chrono::DateTime<chrono::Utc>,
            DatetimeVal,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            (),
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DateVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            (),
            DateVal,
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn datetime_val(
        self,
        datetime_val: &'a chrono::NaiveDateTime,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            &'a chrono::NaiveDateTime,
            DateVal,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            (),
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    TimeVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            (),
            TimeVal,
            JsonVal,
        ),
    >
{
    pub fn date_val(
        self,
        date_val: &'a chrono::NaiveDate,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            &'a chrono::NaiveDate,
            TimeVal,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            (),
            time_val,
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    JsonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            (),
            JsonVal,
        ),
    >
{
    pub fn time_val(
        self,
        time_val: sqlx::mysql::types::MySqlTime,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            sqlx::mysql::types::MySqlTime,
            JsonVal,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            (),
            json_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    TinyintVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    FloatVal,
    DoubleVal,
    TextVal,
    BlobVal,
    TimestampVal,
    DatetimeVal,
    DateVal,
    TimeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            (),
        ),
    >
{
    pub fn json_val(
        self,
        json_val: &'a serde_json::Value,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            TinyintVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            BigintVal,
            FloatVal,
            DoubleVal,
            TextVal,
            BlobVal,
            TimestampVal,
            DatetimeVal,
            DateVal,
            TimeVal,
            &'a serde_json::Value,
        ),
    > {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            (),
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                tinyint_val,
                smallint_val,
                int_val,
                int_nullable_val,
                bigint_val,
                float_val,
                double_val,
                text_val,
                blob_val,
                timestamp_val,
                datetime_val,
                date_val,
                time_val,
                json_val,
            ),
            _phantom,
        }
    }
}
impl<'a>
    InsertMappingBuilder<
        'a,
        (
            bool,
            i8,
            i16,
            i32,
            Option<i32>,
            i64,
            f32,
            f64,
            &'a str,
            &'a [u8],
            &'a chrono::DateTime<chrono::Utc>,
            &'a chrono::NaiveDateTime,
            &'a chrono::NaiveDate,
            sqlx::mysql::types::MySqlTime,
            &'a serde_json::Value,
        ),
    >
{
    pub const fn build(self) -> InsertMapping<'a> {
        let (
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        ) = self.fields;
        InsertMapping {
            bool_val,
            tinyint_val,
            smallint_val,
            int_val,
            int_nullable_val,
            bigint_val,
            float_val,
            double_val,
            text_val,
            blob_val,
            timestamp_val,
            datetime_val,
            date_val,
            time_val,
            json_val,
        }
    }
}
