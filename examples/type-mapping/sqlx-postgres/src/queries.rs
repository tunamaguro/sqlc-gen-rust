//! Code generated by sqlc-gen-rust. SHOULD NOT EDIT.
//! sqlc version: v1.28.0
//! sqlc-gen-rust version: v0.1.8

pub struct CopyDataSink<C: std::ops::DerefMut<Target = sqlx::PgConnection>> {
    encode_buf: sqlx::postgres::PgArgumentBuffer,
    data_buf: Vec<u8>,
    copy_in: sqlx::postgres::PgCopyIn<C>,
}
impl<C: std::ops::DerefMut<Target = sqlx::PgConnection>> CopyDataSink<C> {
    const BUFFER_SIZE: usize = 4096;
    fn new(copy_in: sqlx::postgres::PgCopyIn<C>) -> Self {
        let mut data_buf = Vec::with_capacity(Self::BUFFER_SIZE);
        const COPY_SIGNATURE: &[u8] = &[
            b'P', b'G', b'C', b'O', b'P', b'Y', b'\n', 0xFF, b'\r', b'\n', 0x00,
        ];
        assert_eq!(COPY_SIGNATURE.len(), 11);
        data_buf.extend_from_slice(COPY_SIGNATURE);
        data_buf.extend(0_i32.to_be_bytes());
        data_buf.extend(0_i32.to_be_bytes());
        CopyDataSink {
            encode_buf: Default::default(),
            data_buf,
            copy_in,
        }
    }
    async fn send(&mut self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        let _copy_in = self.copy_in.send(self.data_buf.as_slice()).await?;
        self.data_buf.clear();
        Ok(())
    }
    /// Complete copy process and return number of rows affected.
    pub async fn finish(mut self) -> Result<u64, Box<dyn std::error::Error + Send + Sync>> {
        const COPY_TRAILER: &[u8] = &(-1_i16).to_be_bytes();
        self.data_buf.extend(COPY_TRAILER);
        self.send().await?;
        self.copy_in.finish().await.map_err(|e| e.into())
    }
    fn insert_row(&mut self) {
        let num_col = self.copy_in.num_columns() as i16;
        self.data_buf.extend(num_col.to_be_bytes());
    }
    async fn add<'q, T>(
        &mut self,
        value: &T,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>>
    where
        T: sqlx::Encode<'q, sqlx::Postgres> + sqlx::Type<sqlx::Postgres>,
    {
        let is_null = value.encode_by_ref(&mut self.encode_buf)?;
        match is_null {
            sqlx::encode::IsNull::Yes => {
                self.data_buf.extend((-1_i32).to_be_bytes());
            }
            sqlx::encode::IsNull::No => {
                self.data_buf
                    .extend((self.encode_buf.len() as i32).to_be_bytes());
                self.data_buf.extend_from_slice(self.encode_buf.as_slice());
            }
        }
        self.encode_buf.clear();
        if self.data_buf.len() > Self::BUFFER_SIZE {
            self.send().await?;
        }
        Ok(())
    }
}
#[derive(Debug, Clone, Copy, sqlx::Type)]
#[sqlx(type_name = "mood")]
pub enum Mood {
    #[sqlx(rename = "sad")]
    Sad,
    #[sqlx(rename = "ok")]
    Ok,
    #[sqlx(rename = "happy")]
    Happy,
}
#[derive(sqlx::FromRow)]
pub struct GetMappingRow {
    pub bool_val: bool,
    pub bool_array_val: Vec<bool>,
    pub char_val: i8,
    pub smallint_val: i16,
    pub int_val: i32,
    pub int_nullable_val: Option<i32>,
    pub oid_val: sqlx::postgres::types::Oid,
    pub bigint_val: i64,
    pub real_val: f32,
    pub double_val: f64,
    pub text_val: String,
    pub text_nullable_val: Option<String>,
    pub bytea_val: Vec<u8>,
    pub hstore_val: sqlx::postgres::types::PgHstore,
    pub timestamp_val: chrono::NaiveDateTime,
    pub timestamptz_val: chrono::DateTime<chrono::Utc>,
    pub date_val: chrono::NaiveDate,
    pub time_val: chrono::NaiveTime,
    pub inet_val: std::net::IpAddr,
    pub json_val: serde_json::Value,
    pub jsonb_val: serde_json::Value,
    pub uuid_val: uuid::Uuid,
    pub enum_val: Mood,
    pub composite_val: crate::Complex,
    pub money_val: sqlx::postgres::types::PgMoney,
    pub ltree_val: sqlx::postgres::types::PgLTree,
    pub lquery_val: sqlx::postgres::types::PgLQuery,
    pub cube_val: sqlx::postgres::types::PgCube,
    pub point_val: sqlx::postgres::types::PgPoint,
    pub line_val: sqlx::postgres::types::PgLine,
    pub lseg_val: sqlx::postgres::types::PgLSeg,
    pub box_val: sqlx::postgres::types::PgBox,
    pub path_val: sqlx::postgres::types::PgPath,
    pub polygon_val: sqlx::postgres::types::PgPolygon,
    pub circle_val: sqlx::postgres::types::PgCircle,
}
pub struct GetMapping;
impl GetMapping {
    pub const QUERY: &'static str = r"SELECT 
    bool_val,
    bool_array_val,
    char_val,
    smallint_val,
    int_val,
    int_nullable_val,
    oid_val,
    bigint_val,
    real_val,
    double_val,
    text_val,
    text_nullable_val,
    bytea_val,
    hstore_val,
    timestamp_val,
    timestamptz_val,
    date_val,
    time_val,
    inet_val,
    json_val,
    jsonb_val,
    uuid_val,
    enum_val,
    composite_val,

    money_val,
    ltree_val,
    lquery_val,
    cube_val,
    point_val,
    line_val,
    lseg_val,
    box_val,
    path_val,
    polygon_val,
    circle_val

FROM mapping";
    pub fn query_as<'a>(
        &'a self,
    ) -> sqlx::query::QueryAs<
        'a,
        sqlx::Postgres,
        GetMappingRow,
        <sqlx::Postgres as sqlx::Database>::Arguments<'a>,
    > {
        sqlx::query_as::<_, GetMappingRow>(Self::QUERY)
    }
    pub fn query_one<'a, 'b, A>(
        &'a self,
        conn: A,
    ) -> impl Future<Output = Result<GetMappingRow, sqlx::Error>> + Send + 'a
    where
        A: sqlx::Acquire<'b, Database = sqlx::Postgres> + Send + 'a,
    {
        async move {
            let mut conn = conn.acquire().await?;
            let val = self.query_as().fetch_one(&mut *conn).await?;
            Ok(val)
        }
    }
    pub fn query_opt<'a, 'b, A>(
        &'a self,
        conn: A,
    ) -> impl Future<Output = Result<Option<GetMappingRow>, sqlx::Error>> + Send + 'a
    where
        A: sqlx::Acquire<'b, Database = sqlx::Postgres> + Send + 'a,
    {
        async move {
            let mut conn = conn.acquire().await?;
            let val = self.query_as().fetch_optional(&mut *conn).await?;
            Ok(val)
        }
    }
}
impl GetMapping {
    pub const fn builder() -> GetMappingBuilder<'static, ()> {
        GetMappingBuilder {
            fields: (),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct GetMappingBuilder<'a, Fields = ()> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a> GetMappingBuilder<'a, ()> {
    pub const fn build(self) -> GetMapping {
        let () = self.fields;
        GetMapping {}
    }
}
#[derive(sqlx::FromRow)]
pub struct InsertMappingRow {}
pub struct InsertMapping<'a> {
    bool_val: bool,
    bool_array_val: &'a [bool],
    char_val: i8,
    smallint_val: i16,
    int_val: i32,
    int_nullable_val: Option<i32>,
    oid_val: sqlx::postgres::types::Oid,
    bigint_val: i64,
    real_val: f32,
    double_val: f64,
    text_val: &'a str,
    text_nullable_val: Option<&'a str>,
    bytea_val: &'a [u8],
    hstore_val: &'a sqlx::postgres::types::PgHstore,
    timestamp_val: &'a chrono::NaiveDateTime,
    timestamptz_val: &'a chrono::DateTime<chrono::Utc>,
    date_val: &'a chrono::NaiveDate,
    time_val: &'a chrono::NaiveTime,
    inet_val: &'a std::net::IpAddr,
    json_val: &'a serde_json::Value,
    jsonb_val: &'a serde_json::Value,
    uuid_val: uuid::Uuid,
    enum_val: Mood,
    composite_val: crate::Complex,
    money_val: &'a sqlx::postgres::types::PgMoney,
    ltree_val: &'a sqlx::postgres::types::PgLTree,
    lquery_val: &'a sqlx::postgres::types::PgLQuery,
    cube_val: &'a sqlx::postgres::types::PgCube,
    point_val: &'a sqlx::postgres::types::PgPoint,
    line_val: &'a sqlx::postgres::types::PgLine,
    lseg_val: &'a sqlx::postgres::types::PgLSeg,
    box_val: &'a sqlx::postgres::types::PgBox,
    path_val: &'a sqlx::postgres::types::PgPath,
    polygon_val: &'a sqlx::postgres::types::PgPolygon,
    circle_val: &'a sqlx::postgres::types::PgCircle,
}
impl<'a> InsertMapping<'a> {
    pub const QUERY: &'static str = r"INSERT INTO mapping
(
    bool_val,
    bool_array_val,
    char_val,
    smallint_val,
    int_val,
    int_nullable_val,
    oid_val,
    bigint_val,
    real_val,
    double_val,
    text_val,
    text_nullable_val,
    bytea_val,
    hstore_val,
    timestamp_val,
    timestamptz_val,
    date_val,
    time_val,
    inet_val,
    json_val,
    jsonb_val,
    uuid_val,
    enum_val,
    composite_val,
    money_val,
    ltree_val,
    lquery_val,
    cube_val,
    point_val,
    line_val,
    lseg_val,
    box_val,
    path_val,
    polygon_val,
    circle_val
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
    $29,
    $30,
    $31,
    $32,
    $33,
    $34,
    $35
)";
    pub fn query_as(
        &'a self,
    ) -> sqlx::query::QueryAs<
        'a,
        sqlx::Postgres,
        InsertMappingRow,
        <sqlx::Postgres as sqlx::Database>::Arguments<'a>,
    > {
        sqlx::query_as::<_, InsertMappingRow>(Self::QUERY)
            .bind(self.bool_val)
            .bind(self.bool_array_val)
            .bind(self.char_val)
            .bind(self.smallint_val)
            .bind(self.int_val)
            .bind(self.int_nullable_val)
            .bind(self.oid_val)
            .bind(self.bigint_val)
            .bind(self.real_val)
            .bind(self.double_val)
            .bind(self.text_val)
            .bind(self.text_nullable_val)
            .bind(self.bytea_val)
            .bind(self.hstore_val)
            .bind(self.timestamp_val)
            .bind(self.timestamptz_val)
            .bind(self.date_val)
            .bind(self.time_val)
            .bind(self.inet_val)
            .bind(self.json_val)
            .bind(self.jsonb_val)
            .bind(self.uuid_val)
            .bind(self.enum_val)
            .bind(self.composite_val)
            .bind(self.money_val)
            .bind(self.ltree_val)
            .bind(self.lquery_val)
            .bind(self.cube_val)
            .bind(self.point_val)
            .bind(self.line_val)
            .bind(self.lseg_val)
            .bind(self.box_val)
            .bind(self.path_val)
            .bind(self.polygon_val)
            .bind(self.circle_val)
    }
    pub fn execute<'b, A>(
        &'a self,
        conn: A,
    ) -> impl Future<Output = Result<<sqlx::Postgres as sqlx::Database>::QueryResult, sqlx::Error>>
    + Send
    + 'a
    where
        A: sqlx::Acquire<'b, Database = sqlx::Postgres> + Send + 'a,
    {
        async move {
            let mut conn = conn.acquire().await?;
            sqlx::query(Self::QUERY)
                .bind(self.bool_val)
                .bind(self.bool_array_val)
                .bind(self.char_val)
                .bind(self.smallint_val)
                .bind(self.int_val)
                .bind(self.int_nullable_val)
                .bind(self.oid_val)
                .bind(self.bigint_val)
                .bind(self.real_val)
                .bind(self.double_val)
                .bind(self.text_val)
                .bind(self.text_nullable_val)
                .bind(self.bytea_val)
                .bind(self.hstore_val)
                .bind(self.timestamp_val)
                .bind(self.timestamptz_val)
                .bind(self.date_val)
                .bind(self.time_val)
                .bind(self.inet_val)
                .bind(self.json_val)
                .bind(self.jsonb_val)
                .bind(self.uuid_val)
                .bind(self.enum_val)
                .bind(self.composite_val)
                .bind(self.money_val)
                .bind(self.ltree_val)
                .bind(self.lquery_val)
                .bind(self.cube_val)
                .bind(self.point_val)
                .bind(self.line_val)
                .bind(self.lseg_val)
                .bind(self.box_val)
                .bind(self.path_val)
                .bind(self.polygon_val)
                .bind(self.circle_val)
                .execute(&mut *conn)
                .await
        }
    }
}
impl<'a> InsertMapping<'a> {
    pub const fn builder() -> InsertMappingBuilder<
        'a,
        (
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
        ),
    > {
        InsertMappingBuilder {
            fields: (
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
            ),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct InsertMappingBuilder<
    'a,
    Fields = (
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
    ),
> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<
    'a,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            (),
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn bool_val(
        self,
        bool_val: bool,
    ) -> InsertMappingBuilder<
        'a,
        (
            bool,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            (),
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            (),
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn bool_array_val(
        self,
        bool_array_val: &'a [bool],
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            &'a [bool],
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            (),
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            (),
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn char_val(
        self,
        char_val: i8,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            i8,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            (),
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            (),
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn smallint_val(
        self,
        smallint_val: i16,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            i16,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            (),
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            (),
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn int_val(
        self,
        int_val: i32,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            i32,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            (),
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            (),
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn int_nullable_val(
        self,
        int_nullable_val: Option<i32>,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            Option<i32>,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            (),
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            (),
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn oid_val(
        self,
        oid_val: sqlx::postgres::types::Oid,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            sqlx::postgres::types::Oid,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            (),
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            (),
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn bigint_val(
        self,
        bigint_val: i64,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            i64,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            (),
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            (),
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn real_val(
        self,
        real_val: f32,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            f32,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            (),
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            (),
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn double_val(
        self,
        double_val: f64,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            f64,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            (),
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            (),
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn text_val(
        self,
        text_val: &'a str,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            &'a str,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            (),
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            (),
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn text_nullable_val(
        self,
        text_nullable_val: Option<&'a str>,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            Option<&'a str>,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            (),
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            (),
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn bytea_val(
        self,
        bytea_val: &'a [u8],
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            &'a [u8],
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            (),
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            (),
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn hstore_val(
        self,
        hstore_val: &'a sqlx::postgres::types::PgHstore,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            &'a sqlx::postgres::types::PgHstore,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            (),
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            (),
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn timestamp_val(
        self,
        timestamp_val: &'a chrono::NaiveDateTime,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            &'a chrono::NaiveDateTime,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            (),
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            (),
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn timestamptz_val(
        self,
        timestamptz_val: &'a chrono::DateTime<chrono::Utc>,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            &'a chrono::DateTime<chrono::Utc>,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            (),
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            (),
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn date_val(
        self,
        date_val: &'a chrono::NaiveDate,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            &'a chrono::NaiveDate,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            (),
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            (),
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn time_val(
        self,
        time_val: &'a chrono::NaiveTime,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            &'a chrono::NaiveTime,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            (),
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            (),
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn inet_val(
        self,
        inet_val: &'a std::net::IpAddr,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            &'a std::net::IpAddr,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            (),
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            (),
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn json_val(
        self,
        json_val: &'a serde_json::Value,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            &'a serde_json::Value,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            (),
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            (),
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn jsonb_val(
        self,
        jsonb_val: &'a serde_json::Value,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            &'a serde_json::Value,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            (),
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            (),
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn uuid_val(
        self,
        uuid_val: uuid::Uuid,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            uuid::Uuid,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            (),
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            (),
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn enum_val(
        self,
        enum_val: Mood,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            Mood,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            (),
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            (),
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn composite_val(
        self,
        composite_val: crate::Complex,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            crate::Complex,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            (),
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            (),
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn money_val(
        self,
        money_val: &'a sqlx::postgres::types::PgMoney,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            &'a sqlx::postgres::types::PgMoney,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            (),
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            (),
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn ltree_val(
        self,
        ltree_val: &'a sqlx::postgres::types::PgLTree,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            &'a sqlx::postgres::types::PgLTree,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            (),
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            (),
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn lquery_val(
        self,
        lquery_val: &'a sqlx::postgres::types::PgLQuery,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            &'a sqlx::postgres::types::PgLQuery,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            (),
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            (),
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn cube_val(
        self,
        cube_val: &'a sqlx::postgres::types::PgCube,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            &'a sqlx::postgres::types::PgCube,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            (),
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            (),
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn point_val(
        self,
        point_val: &'a sqlx::postgres::types::PgPoint,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            &'a sqlx::postgres::types::PgPoint,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            (),
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            (),
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn line_val(
        self,
        line_val: &'a sqlx::postgres::types::PgLine,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            &'a sqlx::postgres::types::PgLine,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            (),
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    BoxVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            (),
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn lseg_val(
        self,
        lseg_val: &'a sqlx::postgres::types::PgLSeg,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            &'a sqlx::postgres::types::PgLSeg,
            BoxVal,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            (),
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    PathVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            (),
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn box_val(
        self,
        box_val: &'a sqlx::postgres::types::PgBox,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            &'a sqlx::postgres::types::PgBox,
            PathVal,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            (),
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PolygonVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            (),
            PolygonVal,
            CircleVal,
        ),
    >
{
    pub fn path_val(
        self,
        path_val: &'a sqlx::postgres::types::PgPath,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            &'a sqlx::postgres::types::PgPath,
            PolygonVal,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            (),
            polygon_val,
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    CircleVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            (),
            CircleVal,
        ),
    >
{
    pub fn polygon_val(
        self,
        polygon_val: &'a sqlx::postgres::types::PgPolygon,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            &'a sqlx::postgres::types::PgPolygon,
            CircleVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            (),
            circle_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
    MoneyVal,
    LtreeVal,
    LqueryVal,
    CubeVal,
    PointVal,
    LineVal,
    LsegVal,
    BoxVal,
    PathVal,
    PolygonVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            (),
        ),
    >
{
    pub fn circle_val(
        self,
        circle_val: &'a sqlx::postgres::types::PgCircle,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
            MoneyVal,
            LtreeVal,
            LqueryVal,
            CubeVal,
            PointVal,
            LineVal,
            LsegVal,
            BoxVal,
            PathVal,
            PolygonVal,
            &'a sqlx::postgres::types::PgCircle,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            (),
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
                money_val,
                ltree_val,
                lquery_val,
                cube_val,
                point_val,
                line_val,
                lseg_val,
                box_val,
                path_val,
                polygon_val,
                circle_val,
            ),
            _phantom,
        }
    }
}
impl<'a>
    InsertMappingBuilder<
        'a,
        (
            bool,
            &'a [bool],
            i8,
            i16,
            i32,
            Option<i32>,
            sqlx::postgres::types::Oid,
            i64,
            f32,
            f64,
            &'a str,
            Option<&'a str>,
            &'a [u8],
            &'a sqlx::postgres::types::PgHstore,
            &'a chrono::NaiveDateTime,
            &'a chrono::DateTime<chrono::Utc>,
            &'a chrono::NaiveDate,
            &'a chrono::NaiveTime,
            &'a std::net::IpAddr,
            &'a serde_json::Value,
            &'a serde_json::Value,
            uuid::Uuid,
            Mood,
            crate::Complex,
            &'a sqlx::postgres::types::PgMoney,
            &'a sqlx::postgres::types::PgLTree,
            &'a sqlx::postgres::types::PgLQuery,
            &'a sqlx::postgres::types::PgCube,
            &'a sqlx::postgres::types::PgPoint,
            &'a sqlx::postgres::types::PgLine,
            &'a sqlx::postgres::types::PgLSeg,
            &'a sqlx::postgres::types::PgBox,
            &'a sqlx::postgres::types::PgPath,
            &'a sqlx::postgres::types::PgPolygon,
            &'a sqlx::postgres::types::PgCircle,
        ),
    >
{
    pub const fn build(self) -> InsertMapping<'a> {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        ) = self.fields;
        InsertMapping {
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
            money_val,
            ltree_val,
            lquery_val,
            cube_val,
            point_val,
            line_val,
            lseg_val,
            box_val,
            path_val,
            polygon_val,
            circle_val,
        }
    }
}
