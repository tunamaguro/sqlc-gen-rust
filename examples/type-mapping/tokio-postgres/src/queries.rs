//! Code generated by sqlc-gen-rust. SHOULD NOT EDIT.
//! sqlc version: v1.28.0
//! sqlc-gen-rust version: v0.1.8

use tokio_postgres::types::ToSql;
#[derive(Debug, Clone, Copy, postgres_types::ToSql, postgres_types::FromSql)]
#[postgres(name = "mood")]
pub enum Mood {
    #[postgres(name = "sad")]
    Sad,
    #[postgres(name = "ok")]
    Ok,
    #[postgres(name = "happy")]
    Happy,
}
pub struct GetMappingRow {
    pub bool_val: bool,
    pub bool_array_val: Vec<bool>,
    pub char_val: i8,
    pub smallint_val: i16,
    pub int_val: i32,
    pub int_nullable_val: Option<i32>,
    pub oid_val: u32,
    pub bigint_val: i64,
    pub real_val: f32,
    pub double_val: f64,
    pub text_val: String,
    pub text_nullable_val: Option<String>,
    pub bytea_val: Vec<u8>,
    pub hstore_val: std::collections::HashMap<String, Option<String>>,
    pub timestamp_val: std::time::SystemTime,
    pub timestamptz_val: std::time::SystemTime,
    pub date_val: chrono::NaiveDate,
    pub time_val: chrono::NaiveTime,
    pub inet_val: std::net::IpAddr,
    pub json_val: serde_json::Value,
    pub jsonb_val: serde_json::Value,
    pub uuid_val: uuid::Uuid,
    pub enum_val: Mood,
    pub composite_val: crate::Complex,
}
impl GetMappingRow {
    pub fn from_row(row: &tokio_postgres::Row) -> Result<Self, tokio_postgres::Error> {
        Ok(Self {
            bool_val: row.try_get(0)?,
            bool_array_val: row.try_get(1)?,
            char_val: row.try_get(2)?,
            smallint_val: row.try_get(3)?,
            int_val: row.try_get(4)?,
            int_nullable_val: row.try_get(5)?,
            oid_val: row.try_get(6)?,
            bigint_val: row.try_get(7)?,
            real_val: row.try_get(8)?,
            double_val: row.try_get(9)?,
            text_val: row.try_get(10)?,
            text_nullable_val: row.try_get(11)?,
            bytea_val: row.try_get(12)?,
            hstore_val: row.try_get(13)?,
            timestamp_val: row.try_get(14)?,
            timestamptz_val: row.try_get(15)?,
            date_val: row.try_get(16)?,
            time_val: row.try_get(17)?,
            inet_val: row.try_get(18)?,
            json_val: row.try_get(19)?,
            jsonb_val: row.try_get(20)?,
            uuid_val: row.try_get(21)?,
            enum_val: row.try_get(22)?,
            composite_val: row.try_get(23)?,
        })
    }
}
pub struct GetMapping;
impl GetMapping {
    pub const QUERY: &'static str = r"SELECT 
    bool_val,
    bool_array_val,
    char_val,
    smallint_val,
    int_val,
    int_nullable_val,
    oid_val,
    bigint_val,
    real_val,
    double_val,
    text_val,
    text_nullable_val,
    bytea_val,
    hstore_val,
    timestamp_val,
    timestamptz_val,
    date_val,
    time_val,
    inet_val,
    json_val,
    jsonb_val,
    uuid_val,
    enum_val,
    composite_val
FROM mapping";
    pub async fn query_one(
        &self,
        client: &impl tokio_postgres::GenericClient,
    ) -> Result<GetMappingRow, tokio_postgres::Error> {
        let row = client.query_one(Self::QUERY, &self.as_slice()).await?;
        GetMappingRow::from_row(&row)
    }
    pub async fn query_opt(
        &self,
        client: &impl tokio_postgres::GenericClient,
    ) -> Result<Option<GetMappingRow>, tokio_postgres::Error> {
        let row = client.query_opt(Self::QUERY, &self.as_slice()).await?;
        match row {
            Some(row) => Ok(Some(GetMappingRow::from_row(&row)?)),
            None => Ok(None),
        }
    }
    pub fn as_slice(&self) -> [&(dyn ToSql + Sync); 0] {
        []
    }
}
impl GetMapping {
    pub const fn builder() -> GetMappingBuilder<'static, ()> {
        GetMappingBuilder {
            fields: (),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct GetMappingBuilder<'a, Fields = ()> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<'a> GetMappingBuilder<'a, ()> {
    pub const fn build(self) -> GetMapping {
        let () = self.fields;
        GetMapping {}
    }
}
pub struct InsertMappingRow {}
impl InsertMappingRow {
    pub fn from_row(row: &tokio_postgres::Row) -> Result<Self, tokio_postgres::Error> {
        Ok(Self {})
    }
}
pub struct InsertMapping<'a> {
    bool_val: bool,
    bool_array_val: &'a [bool],
    char_val: i8,
    smallint_val: i16,
    int_val: i32,
    int_nullable_val: Option<i32>,
    oid_val: u32,
    bigint_val: i64,
    real_val: f32,
    double_val: f64,
    text_val: &'a str,
    text_nullable_val: Option<&'a str>,
    bytea_val: &'a [u8],
    hstore_val: &'a std::collections::HashMap<String, Option<String>>,
    timestamp_val: &'a std::time::SystemTime,
    timestamptz_val: &'a std::time::SystemTime,
    date_val: &'a chrono::NaiveDate,
    time_val: &'a chrono::NaiveTime,
    inet_val: &'a std::net::IpAddr,
    json_val: &'a serde_json::Value,
    jsonb_val: &'a serde_json::Value,
    uuid_val: uuid::Uuid,
    enum_val: Mood,
    composite_val: crate::Complex,
}
impl<'a> InsertMapping<'a> {
    pub const QUERY: &'static str = r"INSERT INTO mapping
(
    bool_val,
    bool_array_val,
    char_val,
    smallint_val,
    int_val,
    int_nullable_val,
    oid_val,
    bigint_val,
    real_val,
    double_val,
    text_val,
    text_nullable_val,
    bytea_val,
    hstore_val,
    timestamp_val,
    timestamptz_val,
    date_val,
    time_val,
    inet_val,
    json_val,
    jsonb_val,
    uuid_val,
    enum_val,
    composite_val
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8, 
    $9, 
    $10, 
    $11, 
    $12, 
    $13, 
    $14, 
    $15, 
    $16, 
    $17, 
    $18, 
    $19, 
    $20, 
    $21, 
    $22, 
    $23, 
    $24
)";
    pub async fn execute(
        &self,
        client: &impl tokio_postgres::GenericClient,
    ) -> Result<u64, tokio_postgres::Error> {
        client.execute(Self::QUERY, &self.as_slice()).await
    }
    pub fn as_slice(&self) -> [&(dyn ToSql + Sync); 24] {
        [
            &self.bool_val,
            &self.bool_array_val,
            &self.char_val,
            &self.smallint_val,
            &self.int_val,
            &self.int_nullable_val,
            &self.oid_val,
            &self.bigint_val,
            &self.real_val,
            &self.double_val,
            &self.text_val,
            &self.text_nullable_val,
            &self.bytea_val,
            &self.hstore_val,
            &self.timestamp_val,
            &self.timestamptz_val,
            &self.date_val,
            &self.time_val,
            &self.inet_val,
            &self.json_val,
            &self.jsonb_val,
            &self.uuid_val,
            &self.enum_val,
            &self.composite_val,
        ]
    }
}
impl<'a> InsertMapping<'a> {
    pub const fn builder() -> InsertMappingBuilder<
        'a,
        (
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
            (),
        ),
    > {
        InsertMappingBuilder {
            fields: (
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
                (),
            ),
            _phantom: std::marker::PhantomData,
        }
    }
}
pub struct InsertMappingBuilder<
    'a,
    Fields = (
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
        (),
    ),
> {
    fields: Fields,
    _phantom: std::marker::PhantomData<&'a ()>,
}
impl<
    'a,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            (),
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn bool_val(
        self,
        bool_val: bool,
    ) -> InsertMappingBuilder<
        'a,
        (
            bool,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            (),
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            (),
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn bool_array_val(
        self,
        bool_array_val: &'a [bool],
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            &'a [bool],
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            (),
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            (),
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn char_val(
        self,
        char_val: i8,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            i8,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            (),
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            (),
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn smallint_val(
        self,
        smallint_val: i16,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            i16,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            (),
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            (),
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn int_val(
        self,
        int_val: i32,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            i32,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            (),
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            (),
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn int_nullable_val(
        self,
        int_nullable_val: Option<i32>,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            Option<i32>,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            (),
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            (),
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn oid_val(
        self,
        oid_val: u32,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            u32,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            (),
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            (),
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn bigint_val(
        self,
        bigint_val: i64,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            i64,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            (),
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            (),
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn real_val(
        self,
        real_val: f32,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            f32,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            (),
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            (),
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn double_val(
        self,
        double_val: f64,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            f64,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            (),
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            (),
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn text_val(
        self,
        text_val: &'a str,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            &'a str,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            (),
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            (),
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn text_nullable_val(
        self,
        text_nullable_val: Option<&'a str>,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            Option<&'a str>,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            (),
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            (),
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn bytea_val(
        self,
        bytea_val: &'a [u8],
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            &'a [u8],
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            (),
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            (),
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn hstore_val(
        self,
        hstore_val: &'a std::collections::HashMap<String, Option<String>>,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            &'a std::collections::HashMap<String, Option<String>>,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            (),
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            (),
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn timestamp_val(
        self,
        timestamp_val: &'a std::time::SystemTime,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            &'a std::time::SystemTime,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            (),
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            (),
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn timestamptz_val(
        self,
        timestamptz_val: &'a std::time::SystemTime,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            &'a std::time::SystemTime,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            (),
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            (),
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn date_val(
        self,
        date_val: &'a chrono::NaiveDate,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            &'a chrono::NaiveDate,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            (),
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            (),
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn time_val(
        self,
        time_val: &'a chrono::NaiveTime,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            &'a chrono::NaiveTime,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            (),
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            (),
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn inet_val(
        self,
        inet_val: &'a std::net::IpAddr,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            &'a std::net::IpAddr,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            (),
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonbVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            (),
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn json_val(
        self,
        json_val: &'a serde_json::Value,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            &'a serde_json::Value,
            JsonbVal,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            (),
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    UuidVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            (),
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn jsonb_val(
        self,
        jsonb_val: &'a serde_json::Value,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            &'a serde_json::Value,
            UuidVal,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            (),
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    EnumVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            (),
            EnumVal,
            CompositeVal,
        ),
    >
{
    pub fn uuid_val(
        self,
        uuid_val: uuid::Uuid,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            uuid::Uuid,
            EnumVal,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            (),
            enum_val,
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    CompositeVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            (),
            CompositeVal,
        ),
    >
{
    pub fn enum_val(
        self,
        enum_val: Mood,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            Mood,
            CompositeVal,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            (),
            composite_val,
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<
    'a,
    BoolVal,
    BoolArrayVal,
    CharVal,
    SmallintVal,
    IntVal,
    IntNullableVal,
    OidVal,
    BigintVal,
    RealVal,
    DoubleVal,
    TextVal,
    TextNullableVal,
    ByteaVal,
    HstoreVal,
    TimestampVal,
    TimestamptzVal,
    DateVal,
    TimeVal,
    InetVal,
    JsonVal,
    JsonbVal,
    UuidVal,
    EnumVal,
>
    InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            (),
        ),
    >
{
    pub fn composite_val(
        self,
        composite_val: crate::Complex,
    ) -> InsertMappingBuilder<
        'a,
        (
            BoolVal,
            BoolArrayVal,
            CharVal,
            SmallintVal,
            IntVal,
            IntNullableVal,
            OidVal,
            BigintVal,
            RealVal,
            DoubleVal,
            TextVal,
            TextNullableVal,
            ByteaVal,
            HstoreVal,
            TimestampVal,
            TimestamptzVal,
            DateVal,
            TimeVal,
            InetVal,
            JsonVal,
            JsonbVal,
            UuidVal,
            EnumVal,
            crate::Complex,
        ),
    > {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            (),
        ) = self.fields;
        let _phantom = self._phantom;
        InsertMappingBuilder {
            fields: (
                bool_val,
                bool_array_val,
                char_val,
                smallint_val,
                int_val,
                int_nullable_val,
                oid_val,
                bigint_val,
                real_val,
                double_val,
                text_val,
                text_nullable_val,
                bytea_val,
                hstore_val,
                timestamp_val,
                timestamptz_val,
                date_val,
                time_val,
                inet_val,
                json_val,
                jsonb_val,
                uuid_val,
                enum_val,
                composite_val,
            ),
            _phantom,
        }
    }
}
impl<'a>
    InsertMappingBuilder<
        'a,
        (
            bool,
            &'a [bool],
            i8,
            i16,
            i32,
            Option<i32>,
            u32,
            i64,
            f32,
            f64,
            &'a str,
            Option<&'a str>,
            &'a [u8],
            &'a std::collections::HashMap<String, Option<String>>,
            &'a std::time::SystemTime,
            &'a std::time::SystemTime,
            &'a chrono::NaiveDate,
            &'a chrono::NaiveTime,
            &'a std::net::IpAddr,
            &'a serde_json::Value,
            &'a serde_json::Value,
            uuid::Uuid,
            Mood,
            crate::Complex,
        ),
    >
{
    pub const fn build(self) -> InsertMapping<'a> {
        let (
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        ) = self.fields;
        InsertMapping {
            bool_val,
            bool_array_val,
            char_val,
            smallint_val,
            int_val,
            int_nullable_val,
            oid_val,
            bigint_val,
            real_val,
            double_val,
            text_val,
            text_nullable_val,
            bytea_val,
            hstore_val,
            timestamp_val,
            timestamptz_val,
            date_val,
            time_val,
            inet_val,
            json_val,
            jsonb_val,
            uuid_val,
            enum_val,
            composite_val,
        }
    }
}
